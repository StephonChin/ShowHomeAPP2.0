C51 COMPILER V9.52.0.0   LED_DISPLAY                                                       07/31/2018 14:17:15 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE LED_DISPLAY
OBJECT MODULE PLACED IN Led_Display.obj
COMPILER INVOKED BY: C:\Keil\C51\C51\BIN\C51.EXE Source\Led_Display.c BROWSE INCDIR(.\Include) DEBUG OBJECTEXTEND PRINT(
                    -.\Led_Display.lst) TABS(2) OBJECT(Led_Display.obj)

line level    source

   1          /**********************************************************************
   2            *
   3            * @FileName   Led_Display.c
   4            *
   5          ***********************************************************************/
   6          #include "Led_Display.h"
   7          
   8          
   9          /*  @Gloable Variables */
  10          _TypeStructLed  LedData;
  11          _Uint8        * Color[6];
  12          _Uint8          RedDuty[3];
  13          _Uint8          GreenDuty[3];
  14          _Uint8          BlueDuty[3];
  15          _Uint8          WhiteDuty[3];
  16          
  17          /* @File variables */
  18          _Uint8          ModeTime[6];
  19          _Uint8          ModeStep[6];
  20          _Uint8          EachTime[6];
  21          _Uint8          CircleTime[2];
  22          _Sint16         RndSeed;
  23          _Uint8          TargetDuty;
  24          
  25          
  26          /********************************************************************************
  27           * FunctionName: Led_Duty_Control
  28           */
  29          void Led_Duty_Control(void) interrupt 1
  30          {
  31   1        static _Uint8     DutyCnt;
  32   1        
  33   1        TF0 = RESET;
  34   1        
  35   1        //led control
  36   1        DutyCnt++;
  37   1        if (DutyCnt > 99)       DutyCnt = 0;
  38   1        
  39   1        //RED 1
  40   1        if (DutyCnt < RedDuty[0])         PORT_R_1 = LED_ON;
  41   1        else                              PORT_R_1 = LED_OFF;
  42   1          
  43   1        //RED 2
  44   1        if (DutyCnt < RedDuty[1])         PORT_R_2 = LED_ON;
  45   1        else                              PORT_R_2 = LED_OFF;
  46   1          
  47   1        //RED 3
  48   1        if (DutyCnt < RedDuty[2])         PORT_R_3 = LED_ON;
  49   1        else                              PORT_R_3 = LED_OFF;
  50   1          
  51   1        //GREEN 1
  52   1        if (DutyCnt < GreenDuty[0])       PORT_G_1 = LED_ON;
  53   1        else                              PORT_G_1 = LED_OFF;
  54   1          
C51 COMPILER V9.52.0.0   LED_DISPLAY                                                       07/31/2018 14:17:15 PAGE 2   

  55   1        //GREEN 2
  56   1        if (DutyCnt < GreenDuty[1])       PORT_G_2 = LED_ON;
  57   1        else                              PORT_G_2 = LED_OFF;
  58   1          
  59   1        //GREEN 3
  60   1        if (DutyCnt < GreenDuty[2])       PORT_G_3 = LED_ON;
  61   1        else                              PORT_G_3 = LED_OFF;
  62   1          
  63   1         //BLUE 1
  64   1         if (DutyCnt < BlueDuty[0])       PORT_B_1 = LED_ON;
  65   1         else                             PORT_B_1 = LED_OFF;
  66   1          
  67   1        //BLUE 2
  68   1        if (DutyCnt < BlueDuty[1])        PORT_B_2 = LED_ON;
  69   1        else                              PORT_B_2 = LED_OFF;
  70   1        
  71   1        //BLUE 3
  72   1        if (DutyCnt < BlueDuty[2])        PORT_B_3 = LED_ON;
  73   1        else                              PORT_B_3 = LED_OFF;
  74   1      
  75   1        
  76   1        //WHITE 1
  77   1        if (DutyCnt < WhiteDuty[0])       PORT_W_1 = LED_ON;
  78   1        else                              PORT_W_1 = LED_OFF;
  79   1      
  80   1        //WHITE 2
  81   1        if (DutyCnt < WhiteDuty[1])       PORT_W_2 = LED_ON;
  82   1        else                              PORT_W_2 = LED_OFF;
  83   1        
  84   1        //WHITE 3
  85   1        if (DutyCnt < WhiteDuty[2])       PORT_W_3 = LED_ON;
  86   1        else                              PORT_W_3 = LED_OFF;
  87   1      }
  88          
  89          /********************************************************************************
  90            *
  91            * @ FunctionName: Led_Display_Control
  92            *
  93          *****/
  94          void Led_Display_Control(void)
  95          {
  96   1          Normal_Mode(LedData.Mode);
  97   1      }
  98          
  99          /*********************************************************************************
 100            *
 101            * @ FunctionName: Normal_Mode
 102            *
 103          *****/
 104          static void Normal_Mode(_Uint8 ModeValBuf)
 105          {
 106   1        /* The mode is warning for timer */
 107   1        if (LedData.WarningFlag == TRUE)
 108   1        {
 109   2          Warning_Mode();
 110   2          return;
 111   2        }
 112   1        
 113   1        RndSeed++;
 114   1        
 115   1        switch (ModeValBuf)
 116   1        {
C51 COMPILER V9.52.0.0   LED_DISPLAY                                                       07/31/2018 14:17:15 PAGE 3   

 117   2            case 0x0:         Power_Off();                          break;      /* power off      */
 118   2            case 0x1:         Steady();                             break;      /* steady         */
 119   2            case 0x2:         Flash(SPARKLE_TIME, SPARKLE_BASIC);   break;      /* flash fast     */
 120   2            case 0x3:         Flash(GLIMMER_TIME, GLIMMER_BASIC);   break;      /* flash slowly   */    
 121   2            case 0x4:         Fade();                               break;      /* fade           */
 122   2            case 0x5:         Twinkle();                            break;      /* twinkle        */
 123   2            case 0x6:         Fire();                               break;      /* fire           */
 124   2            case 0x7:         Night();                              break;      /* night          */
 125   2            default:          Circle();                 break;      /* circle         */    
 126   2        }
 127   1      }
 128          
 129          
 130          /**********************************************************************************************
 131            *
 132            * @FunctionName   All_Off
 133            * @Description    Turn all the LEDs
 134            *
 135          *****/
 136          static void All_Off(void)
 137          {
 138   1        _Uint8  TempCnt = 0;
 139   1        
 140   1        for (TempCnt = 0; TempCnt < 3; TempCnt++)
 141   1        {
 142   2          RedDuty[TempCnt]    = 0;
 143   2          GreenDuty[TempCnt]  = 0;
 144   2          BlueDuty[TempCnt]   = 0;
 145   2          WhiteDuty[TempCnt]  = 0;
 146   2        }
 147   1      }
 148          
 149          
 150          /**********************************************************************************************
 151            *
 152            * @FunctionName   Warning_Mode
 153            * @Description    Turn all the LEDs
 154            *
 155          *****/
 156          static void Warning_Mode(void)
 157          {
 158   1        _Uint8  TempCnt = 0;
 159   1        
 160   1        if (LedData.InitFlag == TRUE)
 161   1        {
 162   2          LedData.InitFlag  = FALSE;
 163   2          ModeTime[0]       = 0x0;
 164   2          ModeStep[0]       = 0x0;
 165   2          return;
 166   2        }
 167   1        
 168   1        ModeTime[0]++;
 169   1        if (ModeTime[0] >= 15)
 170   1        {
 171   2          ModeTime[0]   = 0;
 172   2          ModeStep[0]++;
 173   2        }
 174   1        
 175   1        switch (ModeStep[0])
 176   1        {
 177   2          case 0:
 178   2          case 2:
C51 COMPILER V9.52.0.0   LED_DISPLAY                                                       07/31/2018 14:17:15 PAGE 4   

 179   2          {
 180   3            for (TempCnt = 0; TempCnt < 3; TempCnt++)
 181   3            {
 182   4              RedDuty[TempCnt]    = 0;
 183   4              GreenDuty[TempCnt]  = 0;
 184   4              BlueDuty[TempCnt]   = 0;
 185   4              WhiteDuty[TempCnt]  = 0;
 186   4            }
 187   3          } break;
 188   2          
 189   2          case 1:
 190   2          case 3:
 191   2          {
 192   3            for (TempCnt = 0; TempCnt < 3; TempCnt++)
 193   3            {
 194   4              RedDuty[TempCnt]    = 100;
 195   4              GreenDuty[TempCnt]  = 100;
 196   4              BlueDuty[TempCnt]   = 100;
 197   4              WhiteDuty[TempCnt]  = 100;
 198   4            }
 199   3          } break;
 200   2          
 201   2          case 4:
 202   2          {
 203   3            for (TempCnt = 0; TempCnt < 3; TempCnt++)
 204   3            {
 205   4              RedDuty[TempCnt]    = 0;
 206   4              GreenDuty[TempCnt]  = 0;
 207   4              BlueDuty[TempCnt]   = 0;
 208   4              WhiteDuty[TempCnt]  = 0;
 209   4            }
 210   3            
 211   3            LedData.WarningFlag   = FALSE;
 212   3            LedData.InitFlag      = TRUE;
 213   3          } break;
 214   2        }
 215   1      }
 216          
 217          
 218          /*********************************************************************************
 219           * Function: Power_Off
 220           */
 221          static void Power_Off(void)
 222          {
 223   1        if (LedData.InitFlag == TRUE)
 224   1        {
 225   2          LedData.InitFlag  = FALSE;  
 226   2          All_Off();
 227   2        }
 228   1      }
 229          
 230          
 231          
 232          
 233          /***********************************************************************************
 234           * Function: Steady
 235           */
 236          static void Steady(void)
 237          {
 238   1        _Uint8  TempCnt = 0;
 239   1          
 240   1        /* Mode initialize */
C51 COMPILER V9.52.0.0   LED_DISPLAY                                                       07/31/2018 14:17:15 PAGE 5   

 241   1        if (LedData.InitFlag == TRUE)
 242   1        {
 243   2          LedData.InitFlag  = FALSE;  
 244   2          All_Off();
 245   2              
 246   2          /* Get value */
 247   2          for (TempCnt = 0; TempCnt < 6; TempCnt++)
 248   2          {
 249   3            if (Color[TempCnt] != NULL)       *(Color[TempCnt]) = DUTY_MAX;
 250   3          }
 251   2        }
 252   1      }
 253          
 254          /***********************************************************************************
 255           * Function: Flash
 256           */
 257          static void Flash(_Uint8 FlashSpeed, _Uint8 FlashBasic)
 258          {
 259   1        _Uint8  TempCnt = 0;
 260   1        static _Uint8   FlashConst;
 261   1        
 262   1        if (LedData.InitFlag == TRUE)
 263   1        {
 264   2          LedData.InitFlag  = FALSE;  
 265   2          All_Off();
 266   2            
 267   2          /* initialize the time & step */
 268   2          ModeTime[0] = FlashSpeed;
 269   2          ModeTime[1] = 0;
 270   2          ModeStep[0] = 0;
 271   2          FlashConst  = 0;
 272   2            
 273   2          /* initialize the pointer */
 274   2          for (TempCnt = 0; TempCnt < 6; TempCnt++)
 275   2          {
 276   3            if (Color[TempCnt] != NULL)     *(Color[TempCnt]) = DUTY_MAX;
 277   3          }
 278   2          
 279   2          for (TempCnt = 0; TempCnt < 6; TempCnt++)
 280   2          {
 281   3            srand(RndSeed++);
 282   3            ModeStep[TempCnt] = ((_Uint8)rand()) % FlashSpeed + FlashBasic;
 283   3          }
 284   2        }
 285   1        
 286   1        /* mode start */
 287   1        else
 288   1        {
 289   2          for (TempCnt = 0; TempCnt < 6; TempCnt++)
 290   2          {
 291   3            if (Color[TempCnt] == NULL)   continue;
 292   3            
 293   3            if (ModeTime[TempCnt]++ > ModeStep[TempCnt])
 294   3            {
 295   4              ModeTime[TempCnt] = 0;
 296   4              ModeStep[TempCnt] = ((_Uint8)rand()) % FlashSpeed + FlashBasic;
 297   4              *(Color[TempCnt]) = DUTY_MAX - *(Color[TempCnt]);
 298   4            }
 299   3          }
 300   2          
 301   2          for (TempCnt = 0; TempCnt < 6; TempCnt++)
 302   2          {
C51 COMPILER V9.52.0.0   LED_DISPLAY                                                       07/31/2018 14:17:15 PAGE 6   

 303   3            if (Color[TempCnt] == NULL)   continue;
 304   3            
 305   3            if (*(Color[TempCnt]) != 0) return;
 306   3          }
 307   2          
 308   2          /* if all off, then select one to turn on */
 309   2          while (*Color[FlashConst] == NULL)
 310   2          {
 311   3            FlashConst++;
 312   3          }
 313   2          *(Color[0]) = DUTY_MAX;
 314   2          FlashConst++;
 315   2          if (FlashConst > 0x5)   FlashConst = 0;
 316   2        }
 317   1      }
 318          
 319          /**********************************************************************************
 320           * Function: Fade
 321           */
 322          static void Fade(void)
 323          {
 324   1        _Uint8  TempCnt = 0;
 325   1          
 326   1        if (LedData.InitFlag == TRUE)
 327   1        {
 328   2          LedData.InitFlag  = FALSE;  
 329   2          All_Off();
 330   2              
 331   2          /* initialize the time & step */
 332   2          for (TempCnt = 0; TempCnt < 6; TempCnt++)
 333   2          {
 334   3            ModeTime[TempCnt] = 0;
 335   3            ModeStep[TempCnt] = 0;
 336   3          }   
 337   2          
 338   2          
 339   2          
 340   2          srand(RndSeed);
 341   2          TargetDuty  = ((_Uint8)rand()) % 100;
 342   2          
 343   2          /* Initialize the pointer */
 344   2          for (TempCnt = 0; TempCnt < 6; TempCnt++)
 345   2          {
 346   3            if (Color[TempCnt] != NULL)       (*Color[TempCnt]) = TempCnt * 5;;
 347   3          }
 348   2        }
 349   1        
 350   1        
 351   1        
 352   1        /* mode fade */
 353   1        else
 354   1        {
 355   2          for (TempCnt = 0; TempCnt < 6; TempCnt++)
 356   2          {
 357   3            if (Color[TempCnt] == NULL)     continue;
 358   3            
 359   3            ModeTime[TempCnt]++;
 360   3            if (ModeTime[TempCnt] > 2)
 361   3            {
 362   4              ModeTime[TempCnt] = 0;
 363   4              
 364   4              switch (ModeStep[TempCnt])
C51 COMPILER V9.52.0.0   LED_DISPLAY                                                       07/31/2018 14:17:15 PAGE 7   

 365   4              {
 366   5                case 0:
 367   5                {
 368   6                  if ((*Color[TempCnt]) < DUTY_MAX)       (*Color[TempCnt])++;
 369   6                  else                                    ModeStep[TempCnt]++;
 370   6                } break;
 371   5                
 372   5                case 1:
 373   5                {
 374   6                  if (*Color[TempCnt] > DUTY_MIN)         (*Color[TempCnt])--;
 375   6                  else                                    ModeStep[TempCnt] = 0;
 376   6                } break;
 377   5              } 
 378   4            }
 379   3          }
 380   2          
 381   2      //    ModeTime[0]++;
 382   2      //    if (ModeTime[0] >= FADE_TIME)    //5ms
 383   2      //    {
 384   2      //      ModeTime[0] = 0;
 385   2      //      
 386   2      //      switch (ModeStep[0])
 387   2      //      {
 388   2      //        /* fade out */
 389   2      //        case 0:
 390   2      //        {
 391   2      //          if (*Color[ModeStep[1]] > TargetDuty)         (*Color[ModeStep[1]])--;
 392   2      //          else                                        ModeStep[0]++;
 393   2      //        } break;
 394   2      //        
 395   2      //        /* dark time */
 396   2      //        case 1:
 397   2      //        {
 398   2      //          ModeTime[1]++;
 399   2      //          if (ModeTime[1] > 200)
 400   2      //          {
 401   2      //            ModeTime[1] = 0;
 402   2      //            ModeTime[2]++;
 403   2      //            if (ModeTime[2] > 2)
 404   2      //            {
 405   2      //              ModeTime[2] = 0;
 406   2      //              ModeStep[0]++;
 407   2      //              srand(RndSeed);
 408   2      //              TargetDuty  = ((_Uint8)rand()) % 100;
 409   2      //            }
 410   2      //          }
 411   2      //        } break;
 412   2      //        
 413   2      //        /* fade in */
 414   2      //        case 2:
 415   2      //        {
 416   2      //          if (*Color[ModeStep[1]] < TargetDuty)       (*Color[ModeStep[1]])++;
 417   2      //          else                                      ModeStep[0]++;
 418   2      //        } break;
 419   2      //        
 420   2      //        /* hold time */
 421   2      //        case 3:
 422   2      //        {
 423   2      //          ModeTime[1]++;
 424   2      //          if (ModeTime[1] > 200)
 425   2      //          {
 426   2      //            ModeTime[1] = 0;
C51 COMPILER V9.52.0.0   LED_DISPLAY                                                       07/31/2018 14:17:15 PAGE 8   

 427   2      //            
 428   2      //            ModeTime[2]++;
 429   2      //            if (ModeTime[2] > 3)
 430   2      //            {
 431   2      //              ModeTime[2] = 0;;
 432   2      //              ModeStep[0] = 0;
 433   2      //              
 434   2      //              srand(RndSeed);
 435   2      //              TargetDuty  = ((_Uint8)rand()) % 100;
 436   2      //              
 437   2      //              /* LED color change */
 438   2      //              ModeStep[1]++;
 439   2      //              if (ModeStep[1] > 5)    ModeStep[1] = 0;
 440   2      //              while (Color[ModeStep[1]] == NULL)
 441   2      //              {
 442   2      //                ModeStep[1]++;
 443   2      //                if (ModeStep[1] > 5)    ModeStep[1] = 0;
 444   2      //              }
 445   2      //            }
 446   2      //          }
 447   2      //        } break;
 448   2      //      }
 449   2      //    }
 450   2        }
 451   1      }
 452          
 453          /*************************************************************************************
 454           * Function : Twinkle
 455           */
 456          static void Twinkle(void)
 457          {
 458   1        _Uint8  TempCnt = 0;
 459   1        static _Uint8   TwinkleTime;
 460   1         
 461   1        if (LedData.InitFlag == TRUE)
 462   1        {
 463   2          LedData.InitFlag  = FALSE;  
 464   2          All_Off();
 465   2              
 466   2          /* Initialize time & step */
 467   2          ModeTime[0] = 0;
 468   2          ModeTime[1] = 0;
 469   2          ModeStep[0] = 0;
 470   2          ModeStep[1] = 0;
 471   2              
 472   2          /* Initialize pointer */
 473   2          for (TempCnt = 0; TempCnt < 6; TempCnt++)
 474   2          {
 475   3            if (Color[TempCnt] != NULL)     *Color[TempCnt] = DUTY_MAX;
 476   3          }
 477   2          
 478   2          srand(RndSeed);
 479   2          TargetDuty  = ((_Uint8)rand()) % 30 + 30;
 480   2          srand(RndSeed);
 481   2          TwinkleTime = ((_Uint8)rand()) % 10 + 2;
 482   2        }
 483   1          
 484   1        /* Twinkle mode */
 485   1        else
 486   1        {
 487   2          ModeTime[0]++;
 488   2          if (ModeTime[0] > TwinkleTime)
C51 COMPILER V9.52.0.0   LED_DISPLAY                                                       07/31/2018 14:17:15 PAGE 9   

 489   2          {
 490   3            ModeTime[0] = 0;
 491   3            switch (ModeStep[0])
 492   3            {
 493   4              case 0:
 494   4              {
 495   5                if (*Color[0] < TargetDuty)
 496   5                {
 497   6                  for (TempCnt = 0; TempCnt < 6; TempCnt++)
 498   6                  {
 499   7                    if (Color[TempCnt] == NULL)     continue;
 500   7                    
 501   7                    (*Color[TempCnt])++;
 502   7                  }
 503   6                }
 504   5                else
 505   5                {
 506   6                  ModeStep[0]++;
 507   6                  srand(RndSeed);
 508   6                  TargetDuty  = ((_Uint8)rand()) % 30;
 509   6                  srand(RndSeed);
 510   6                  TwinkleTime = ((_Uint8)rand()) % 3;
 511   6                }
 512   5              }break;
 513   4              
 514   4              case 1:
 515   4              {
 516   5                if (*Color[0] > TargetDuty)
 517   5                {
 518   6                  for (TempCnt = 0; TempCnt < 6; TempCnt++)
 519   6                  {
 520   7                    if (Color[TempCnt] == NULL)     continue;
 521   7                    
 522   7                    (*Color[TempCnt])--;
 523   7                  }
 524   6                }
 525   5                else
 526   5                {
 527   6                  ModeStep[0] = 0;
 528   6                  srand(RndSeed);
 529   6                  TargetDuty  = ((_Uint8)rand()) % 70 + 30;
 530   6                  srand(RndSeed);
 531   6                  TwinkleTime = ((_Uint8)rand()) % 3;
 532   6                }
 533   5              }break;
 534   4            }
 535   3          }
 536   2          
 537   2          
 538   2      //    ModeTime[0]++;
 539   2      //    if (ModeTime[0] >= TwinkleTime)
 540   2      //    {
 541   2      //      ModeTime[0] = 0;
 542   2      //      
 543   2      //      switch (ModeStep[0])
 544   2      //      {
 545   2      //        /* fade out */
 546   2      //        case 0:
 547   2      //        {
 548   2      //          if (*Color[ModeStep[1]] > DUTY_MIN)         (*Color[ModeStep[1]]) -= 2;
 549   2      //          else                                        ModeStep[0]++;
 550   2      //        } break;
C51 COMPILER V9.52.0.0   LED_DISPLAY                                                       07/31/2018 14:17:15 PAGE 10  

 551   2      //        
 552   2      //        /* dark hold */
 553   2      //        case 1:
 554   2      //        {
 555   2      //          ModeTime[1]++;
 556   2      //          if (ModeTime[1] >= TWINKLE_DARK_TIME)
 557   2      //          {
 558   2      //            ModeTime[1] = 0;
 559   2      //            ModeStep[0]++;
 560   2      //          }
 561   2      //        } break;
 562   2      //        
 563   2      //        /* fade in */
 564   2      //        case 2:
 565   2      //        {
 566   2      //          if (*Color[ModeStep[1]] < DUTY_MAX)         (*Color[ModeStep[1]]) += 5;
 567   2      //          else                                        ModeStep[0]++;
 568   2      //        } break;
 569   2      //        
 570   2      //        /* bright hode and then back*/
 571   2      //        case 3:
 572   2      //        {
 573   2      //          ModeTime[1]++;
 574   2      //          if (ModeTime[1] > (TWINKLE_BRIGHT_TIME - 1))
 575   2      //          {
 576   2      //            ModeTime[1] = 0;
 577   2      //            ModeStep[0] = 0;
 578   2      //            
 579   2      //            /* LED color change */
 580   2      //            ModeStep[1]++;
 581   2      //            if (ModeStep[1] > 5)      ModeStep[1] = 0;
 582   2      //            while (Color[ModeStep[1]] == NULL)
 583   2      //            {
 584   2      //              ModeStep[1]++;
 585   2      //              if (ModeStep[1] > 5)    ModeStep[1] = 0;
 586   2      //            }
 587   2      //          }
 588   2      //        } break;
 589   2      //      }
 590   2      //    }
 591   2        }
 592   1      }
 593          
 594          /************************************************************************************
 595           * Function: Fire
 596           */
 597          static void Fire(void)
 598          {
 599   1        _Uint8  TempCnt = 0;
 600   1          
 601   1        if (LedData.InitFlag == TRUE)
 602   1        {
 603   2          LedData.InitFlag  = FALSE;  
 604   2          All_Off();
 605   2              
 606   2          /* Initialize time & step */
 607   2          ModeTime[0] = 0;
 608   2          ModeTime[1] = 0;
 609   2          ModeStep[0] = 0;
 610   2          ModeStep[1] = 0;
 611   2              
 612   2          /* Initialize pointer */
C51 COMPILER V9.52.0.0   LED_DISPLAY                                                       07/31/2018 14:17:15 PAGE 11  

 613   2          for (TempCnt = 0; TempCnt < 6; TempCnt++)
 614   2          {
 615   3            if (Color[TempCnt] != NULL)         *Color[TempCnt] = DUTY_MAX;
 616   3          }
 617   2        }
 618   1          
 619   1        /* fire mode */
 620   1        else
 621   1        {
 622   2          switch (ModeStep[0])
 623   2          {
 624   3            case 0:
 625   3            {
 626   4              ModeTime[0]++;
 627   4              if (ModeTime[0] > 2)
 628   4              {
 629   5                ModeTime[0] = 0;
 630   5                if (*Color[0] > DUTY_MIN)
 631   5                {
 632   6                  for (TempCnt = 0; TempCnt < 6; TempCnt++)
 633   6                  {
 634   7                    if (Color[TempCnt] != NULL)       (*Color[TempCnt])--;
 635   7                  }
 636   6                }
 637   5                else
 638   5                {
 639   6                  ModeStep[0]++;
 640   6                }
 641   5              }
 642   4            } break;
 643   3            
 644   3            case 1:
 645   3            {
 646   4              (*Color[ModeStep[1]]) = DUTY_MAX;
 647   4              ModeTime[1]++;
 648   4              if (ModeTime[1] > 20)
 649   4              {
 650   5                ModeTime[1] = 0;
 651   5                
 652   5                ModeStep[1]++;
 653   5                if (ModeStep[1] > 5)            ModeStep[1] = 0;
 654   5                
 655   5                while(Color[ModeStep[1]] == NULL)
 656   5                {
 657   6                  ModeStep[1]++;
 658   6                  if (ModeStep[1] > 5)          ModeStep[1] = 0;
 659   6                }
 660   5                
 661   5                if (ModeStep[1] == 0)           ModeStep[0] = 0;
 662   5              }
 663   4            } break;
 664   3          } //switch
 665   2        } // else
 666   1      }
 667          
 668          /***********************************************************************************
 669           * Function: Night
 670           */
 671          static void Night(void)
 672          {
 673   1        _Uint8               TempCnt = 0;
 674   1          
C51 COMPILER V9.52.0.0   LED_DISPLAY                                                       07/31/2018 14:17:15 PAGE 12  

 675   1        if (LedData.InitFlag == TRUE)
 676   1        {
 677   2          LedData.InitFlag  = FALSE;  
 678   2          All_Off();
 679   2              
 680   2          /* initialize the time & step */
 681   2          for (TempCnt = 0; TempCnt < 6; TempCnt++)
 682   2          {
 683   3            ModeTime[TempCnt] = 0;
 684   3            ModeStep[TempCnt] = 0;
 685   3            srand(RndSeed++);
 686   3            EachTime[TempCnt] = ((_Uint8)rand()) % 30 + 2;
 687   3          }
 688   2              
 689   2          /* initialize the pointer */
 690   2          for (TempCnt = 0; TempCnt < 6; TempCnt++)
 691   2          {
 692   3            if (Color[TempCnt] != NULL)       *(Color[TempCnt]) = DUTY_MAX;
 693   3          }
 694   2        } 
 695   1          
 696   1        /* night mode */
 697   1        else
 698   1        {
 699   2          for (TempCnt = 0; TempCnt < 6; TempCnt++)
 700   2          {
 701   3            if (Color[TempCnt] != NULL)
 702   3            {
 703   4              ModeTime[TempCnt]++;
 704   4              if (ModeTime[TempCnt] > EachTime[TempCnt])
 705   4              {
 706   5                ModeTime[TempCnt] = 0;
 707   5                EachTime[TempCnt] = ((_Uint8)rand()) % 30 + 2;
 708   5                
 709   5                switch (ModeStep[TempCnt])
 710   5                {
 711   6                  case 0:
 712   6                  {
 713   7                    if (*Color[TempCnt] > DUTY_MIN)
 714   7                    {
 715   8                      if (Color[TempCnt] != NULL)         (*Color[TempCnt]) -= 10;
 716   8                    }
 717   7                    else
 718   7                    {
 719   8                        ModeStep[TempCnt]++;
 720   8                    }
 721   7                  } break;
 722   6                  
 723   6                      
 724   6                  case 1:
 725   6                  {
 726   7                    if (*Color[TempCnt] < DUTY_MAX)
 727   7                    {
 728   8                      if (Color[TempCnt] != NULL)         (*Color[TempCnt]) += 10;
 729   8                    }
 730   7                    else
 731   7                    {
 732   8                      ModeStep[TempCnt] = 0;
 733   8                    }
 734   7                  } break;
 735   6                }
 736   5              }
C51 COMPILER V9.52.0.0   LED_DISPLAY                                                       07/31/2018 14:17:15 PAGE 13  

 737   4            }
 738   3          }
 739   2        }
 740   1      }
 741          
 742          /*************************************************************************************
 743           * Function: Circle
 744           */
 745          static void Circle(void)
 746          {
 747   1        _Uint8  TempCnt = 0;
 748   1        static _Uint8   CircleModeVal;
 749   1        static _Uint8   CircleTime[2];
 750   1          
 751   1        /* Mode Initialize */
 752   1        if (LedData.CircleInitFlag == TRUE)
 753   1        {
 754   2          /* clear flag */
 755   2          LedData.CircleInitFlag = FALSE;
 756   2          
 757   2          /* initialize the time & step */
 758   2          CircleTime[0] = 0;
 759   2          CircleTime[1] = 0;
 760   2          
 761   2          /* initialize the color& mode */
 762   2          CircleModeVal = 0x1;
 763   2          LedData.InitFlag = TRUE;
 764   2        } 
 765   1        
 766   1        /* circle mode */
 767   1        else
 768   1        {
 769   2            CircleTime[0]++;
 770   2            if (CircleTime[0] > 199)   //200 * 10ms = 2s
 771   2            {
 772   3              CircleTime[0] = 0;
 773   3              CircleTime[1]++;
 774   3              if (CircleTime[1] > 4)   //10s
 775   3              {
 776   4                CircleTime[1] = 0;
 777   4      
 778   4                LedData.InitFlag = TRUE;
 779   4      
 780   4                /* mode change */
 781   4                CircleModeVal++;
 782   4                if (CircleModeVal > 0x7)
 783   4                {
 784   5                  CircleModeVal = 0x1;
 785   5                }
 786   4              }
 787   3            }
 788   2            
 789   2          switch (CircleModeVal)
 790   2          {
 791   3            case 0x0:         Power_Off();                          break;      /* power off      */
 792   3            case 0x1:         Steady();                             break;      /* steady         */
 793   3            case 0x2:         Flash(SPARKLE_TIME, SPARKLE_BASIC);   break;      /* flash fast     */
 794   3            case 0x3:         Flash(GLIMMER_TIME, GLIMMER_BASIC);   break;      /* flash slowly   */    
 795   3            case 0x4:         Fade();                               break;      /* fade           */
 796   3            case 0x5:         Twinkle();                            break;      /* twinkle        */
 797   3            case 0x6:         Fire();                               break;      /* fire           */
 798   3            case 0x7:         Night();                              break;      /* night          */
C51 COMPILER V9.52.0.0   LED_DISPLAY                                                       07/31/2018 14:17:15 PAGE 14  

 799   3          }
 800   2        }//else
 801   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2182    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     65       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
