C51 COMPILER V9.52.0.0   TIMER_MOTOR                                                       07/31/2018 14:17:15 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE TIMER_MOTOR
OBJECT MODULE PLACED IN Timer_Motor.obj
COMPILER INVOKED BY: C:\Keil\C51\C51\BIN\C51.EXE Source\Timer_Motor.c BROWSE INCDIR(.\Include) DEBUG OBJECTEXTEND PRINT(
                    -.\Timer_Motor.lst) TABS(2) OBJECT(Timer_Motor.obj)

line level    source

   1          /*************************************************************
   2            *
   3            * @FileName     Timer_Motor.c
   4            * @Date         2017.03.17
   5            * @Author       DS.Chin
   6            * @Description  Timer through 24 hours
   7            *
   8          **************************************************************/
   9          #include "Timer_Motor.h"
  10          
  11          
  12          /* @Brief Gloable Variables */
  13          _TypeStructTime   TimerData;
  14          
  15          
  16          
  17          /*****************************************************
  18            *
  19            * @FunctionName   Count_Down_Control
  20            *
  21          *****/
  22          void Count_Down_Control(void)
  23          {
  24   1        /* if count down hour equals 0, then exit this function */
  25   1        if (TimerData.CntDwnHour == 0)      return;
  26   1        
  27   1        
  28   1        /* if count down hour unequals 0, then start the time */
  29   1        // Initial the real time
  30   1        if (TimerData.InitFlag == TRUE)
  31   1        {
  32   2          TimerData.InitFlag = FALSE;
  33   2          TimerData.RealTime.MicroSec   = 0;
  34   2          TimerData.RealTime.Second     = 0;
  35   2          TimerData.RealTime.Minute     = 0;
  36   2          TimerData.RealTime.Hour       = 0;
  37   2        }
  38   1        
  39   1        
  40   1        /* Real Time */
  41   1        TimerData.RealTime.MicroSec++;
  42   1        if (TimerData.RealTime.MicroSec >= 100)   // 1s
  43   1        {
  44   2          TimerData.RealTime.MicroSec   = 0;
  45   2          TimerData.RealTime.Second ++;
  46   2          if (TimerData.RealTime.Second >= 60)    // 1minute
  47   2          {
  48   3            TimerData.RealTime.Second   = 0;
  49   3            TimerData.RealTime.Minute ++;
  50   3            if (TimerData.RealTime.Minute >= 60)  // 1hour
  51   3            {
  52   4              TimerData.RealTime.Minute = 0;
  53   4              TimerData.RealTime.Hour ++;
  54   4              if (TimerData.RealTime.Hour >= 24)  // 1day
C51 COMPILER V9.52.0.0   TIMER_MOTOR                                                       07/31/2018 14:17:15 PAGE 2   

  55   4              {
  56   5                TimerData.RealTime.Hour = 0;
  57   5              }
  58   4            }
  59   3          }
  60   2        }
  61   1        
  62   1        
  63   1        /* Get the timer hour status */
  64   1        if (TimerData.RealTime.MicroSec   == 0
  65   1          &&TimerData.RealTime.Second     == 0
  66   1          &&TimerData.RealTime.Minute     == 0
  67   1          &&TimerData.RealTime.Hour       == 0)
  68   1        {
  69   2          TimerData.Status    = TIM_OPEN;
  70   2        }
  71   1        
  72   1        else
  73   1        if (TimerData.RealTime.MicroSec   == 0
  74   1          &&TimerData.RealTime.Second     == 0
  75   1          &&TimerData.RealTime.Minute     == 0
  76   1          &&TimerData.RealTime.Hour       == TimerData.CntDwnHour)
  77   1        {
  78   2          TimerData.Status    = TIM_CLOSE;
  79   2        }
  80   1      }
  81          
  82          
  83          
  84          
  85          
  86          /************************************************************
  87            *
  88            * @FunctionName     Motor_Control
  89            *
  90          *************************************************************/
  91          void Motor_Control(void)
  92          {
  93   1        if (LedData.Mode  == 0)       PORT_MOTOR = RESET;
  94   1        else                          PORT_MOTOR = SET;
  95   1      }
  96          
  97          
  98          
  99          
 100          
 101          
 102          
 103          
 104          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    116    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
