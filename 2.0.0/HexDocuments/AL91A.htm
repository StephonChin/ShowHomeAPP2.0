<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\HexDocuments\AL91A.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\HexDocuments\AL91A.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Mon Jul 30 21:02:19 2018
<BR><P>
<H3>Maximum Stack Usage =        140 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MCU_Config &rArr; CLK_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; __aeabi_uidivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[10]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[18]">ACMP_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[1a]">ADC_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[6]">BOD_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[10]">Default_Handler</a> from startup_mini58series.o(.text) referenced 12 times from startup_mini58series.o(RESET)
 <LI><a href="#[8]">EINT0_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[9]">EINT1_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[d]">FB_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[a]">GPIO01_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[b]">GPIO234_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[14]">GPIO5_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[15]">HIRC_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from retarget.o(.emb_text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[1c]">Hard_Fault_Handler</a> from retarget.o(i.Hard_Fault_Handler) referenced from retarget.o(.emb_text)
 <LI><a href="#[16]">I2C0_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[17]">I2C1_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[19]">PDWU_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[c]">PWM_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[1f]">Reset_Handler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[13]">SPI_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[e]">TMR0_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[f]">TMR1_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[11]">UART0_IRQHandler</a> from csr1010.o(i.UART0_IRQHandler) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[12]">UART1_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[7]">WDT_IRQHandler</a> from startup_mini58series.o(.text) referenced from startup_mini58series.o(RESET)
 <LI><a href="#[1d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mini58series.o(.text)
 <LI><a href="#[1e]">fputc</a> from retarget.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[1b]">main</a> from showhomeapp.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[20]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[25]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[79]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[7a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[7b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[7c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[7d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mini58series.o(.text))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ACMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>FB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPIO01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPIO234_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>GPIO5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>HIRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PDWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Value_Get
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_3
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_2
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_1
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_0
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_3
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_2
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_1
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_0
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_3
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_0
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Steady
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sparkle
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sea_Wave
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roll
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ripple
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instead
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flower_Bloom
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[2e]"></a>rand</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_4
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_2
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_1
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_0
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_3
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_0
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_3
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sparkle
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instead
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flower_Bloom
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink
</UL>

<P><STRONG><a name="[2d]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_4
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_2
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_1
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_0
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_3
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_0
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_3
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sparkle
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instead
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flower_Bloom
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink
</UL>

<P><STRONG><a name="[22]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[21]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[7f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[80]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[81]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>All_Color</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, normal_display.o(i.All_Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = All_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_3
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_2
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_1
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_0
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_4
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_3
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_0
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_3
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_2
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_0
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sea_Wave
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ripple
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_Flash
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Polar_Light
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horse_Whole_Test
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Green_Flash
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flower_Bloom
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Direct_Set
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Show
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Flash
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Off
</UL>

<P><STRONG><a name="[26]"></a>All_Off</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, normal_display.o(i.All_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = All_Off &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[2a]"></a>BT_Work_Detect</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, bt_control.o(i.BT_Work_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BT_Work_Detect &rArr; BT_Power_Control &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Power_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b]"></a>Blink</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, normal_display.o(i.Blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Blink &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[2f]"></a>Blue_Flash</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, normal_display.o(i.Blue_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Blue_Flash &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[31]"></a>CLK_DisablePLL</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clk.o(i.CLK_DisablePLL))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[30]"></a>CLK_EnablePLL</STRONG> (Thumb, 478 bytes, Stack size 72 bytes, clk.o(i.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CLK_EnablePLL &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisablePLL
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[36]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableXtalRC))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[38]"></a>CLK_SetCoreClock</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, clk.o(i.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[37]"></a>CLK_SetHCLK</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, clk.o(i.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[32]"></a>CLK_WaitClockReady</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, clk.o(i.CLK_WaitClockReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[3e]"></a>Color_Show</STRONG> (Thumb, 682 bytes, Stack size 88 bytes, normal_display.o(i.Color_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Color_Show &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[77]"></a>Count_Down_Control</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, timer_ctrl.o(i.Count_Down_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Count_Down_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>Csr1010_Rcv_Data</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, csr1010.o(i.Csr1010_Rcv_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Csr1010_Rcv_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>Csr1010_Snd_Data</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, csr1010.o(i.Csr1010_Snd_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Csr1010_Snd_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>Data_Process</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, data_process.o(i.Data_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Data_Process &rArr; CSR1010_Process &rArr; Color_Value_Get &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Syn_Process
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Password_Process
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSR1010_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>Direct_Set</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, normal_display.o(i.Direct_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Direct_Set &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[48]"></a>FMC_Erase</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fmc.o(i.FMC_Erase))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Data
</UL>

<P><STRONG><a name="[45]"></a>FMC_Open</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(i.FMC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Data
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Data
</UL>

<P><STRONG><a name="[46]"></a>FMC_Read</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fmc.o(i.FMC_Read))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Data
</UL>

<P><STRONG><a name="[49]"></a>FMC_Write</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fmc.o(i.FMC_Write))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Data
</UL>

<P><STRONG><a name="[43]"></a>Flash_Read_Data</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, flash_prgrm.o(i.Flash_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Flash_Read_Data &rArr; SYS_UnlockReg
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Data_Init
</UL>

<P><STRONG><a name="[47]"></a>Flash_Write_Data</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, flash_prgrm.o(i.Flash_Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_Write_Data &rArr; SYS_UnlockReg
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>Flower_Bloom</STRONG> (Thumb, 1320 bytes, Stack size 64 bytes, normal_display.o(i.Flower_Bloom))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Flower_Bloom &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[29]"></a>GPIO_SetMode</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, gpio.o(i.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Power_Control
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
</UL>

<P><STRONG><a name="[4b]"></a>Green_Flash</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, normal_display.o(i.Green_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Green_Flash &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[1c]"></a>Hard_Fault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(i.Hard_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hard_Fault_Handler &rArr; stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.emb_text)
</UL>
<P><STRONG><a name="[4e]"></a>Horse_Whole_Test</STRONG> (Thumb, 240 bytes, Stack size 20 bytes, normal_display.o(i.Horse_Whole_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Horse_Whole_Test &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[4f]"></a>Instead</STRONG> (Thumb, 592 bytes, Stack size 24 bytes, normal_display.o(i.Instead))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Instead &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[50]"></a>Led_Display</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, display_ctrl.o(i.Led_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Led_Display &rArr; Show_3 &rArr; Show_3_1 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Steady
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sparkle
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sea_Wave
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Roll
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ripple
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_Flash
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Polar_Light
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instead
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Horse_Whole_Test
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Green_Flash
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flower_Bloom
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Direct_Set
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Show
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Flash
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>Led_Update</STRONG> (Thumb, 246 bytes, Stack size 20 bytes, led_class.o(i.Led_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Led_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>MCU_Config</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, mcu_config.o(i.MCU_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MCU_Config &rArr; CLK_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetTimeoutCnt
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>Polar_Light</STRONG> (Thumb, 720 bytes, Stack size 60 bytes, normal_display.o(i.Polar_Light))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Polar_Light &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[5a]"></a>Red_Flash</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, normal_display.o(i.Red_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Red_Flash &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[55]"></a>Ripple</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, normal_display.o(i.Ripple))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ripple &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[54]"></a>Roll</STRONG> (Thumb, 874 bytes, Stack size 32 bytes, normal_display.o(i.Roll))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Roll &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[53]"></a>Sea_Wave</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, normal_display.o(i.Sea_Wave))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sea_Wave &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[72]"></a>SendChar_ToUART</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, retarget.o(i.SendChar_ToUART))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[57]"></a>Show_1</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, show_1.o(i.Show_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Show_1 &rArr; Show_1_1 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_3
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_2
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_0
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[60]"></a>Show_1_0</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, show_1.o(i.Show_1_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Show_1_0 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1
</UL>

<P><STRONG><a name="[61]"></a>Show_1_1</STRONG> (Thumb, 666 bytes, Stack size 40 bytes, show_1.o(i.Show_1_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Show_1_1 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1
</UL>

<P><STRONG><a name="[62]"></a>Show_1_2</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, show_1.o(i.Show_1_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Show_1_2 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1
</UL>

<P><STRONG><a name="[5f]"></a>Show_1_3</STRONG> (Thumb, 726 bytes, Stack size 32 bytes, show_1.o(i.Show_1_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Show_1_3 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1
</UL>

<P><STRONG><a name="[58]"></a>Show_2</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, show_2.o(i.Show_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Show_2 &rArr; Show_2_3 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_4
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_3
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_2
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_1
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_0
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[64]"></a>Show_2_0</STRONG> (Thumb, 644 bytes, Stack size 24 bytes, show_2.o(i.Show_2_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Show_2_0 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2
</UL>

<P><STRONG><a name="[63]"></a>Show_2_1</STRONG> (Thumb, 528 bytes, Stack size 48 bytes, show_2.o(i.Show_2_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Show_2_1 &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2
</UL>

<P><STRONG><a name="[65]"></a>Show_2_2</STRONG> (Thumb, 814 bytes, Stack size 56 bytes, show_2.o(i.Show_2_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Show_2_2 &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2
</UL>

<P><STRONG><a name="[66]"></a>Show_2_3</STRONG> (Thumb, 1096 bytes, Stack size 64 bytes, show_2.o(i.Show_2_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Show_2_3 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2
</UL>

<P><STRONG><a name="[67]"></a>Show_2_4</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, show_2.o(i.Show_2_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Show_2_4 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2
</UL>

<P><STRONG><a name="[59]"></a>Show_3</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, show_3.o(i.Show_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Show_3 &rArr; Show_3_1 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_3
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_2
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_1
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_0
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[68]"></a>Show_3_0</STRONG> (Thumb, 786 bytes, Stack size 40 bytes, show_3.o(i.Show_3_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Show_3_0 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3
</UL>

<P><STRONG><a name="[69]"></a>Show_3_1</STRONG> (Thumb, 1416 bytes, Stack size 72 bytes, show_3.o(i.Show_3_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Show_3_1 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3
</UL>

<P><STRONG><a name="[6a]"></a>Show_3_2</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, show_3.o(i.Show_3_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Show_3_2 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3
</UL>

<P><STRONG><a name="[6b]"></a>Show_3_3</STRONG> (Thumb, 540 bytes, Stack size 56 bytes, show_3.o(i.Show_3_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Show_3_3 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3
</UL>

<P><STRONG><a name="[6c]"></a>Show_3_4</STRONG> (Thumb, 642 bytes, Stack size 24 bytes, show_3.o(i.Show_3_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Show_3_4 &rArr; All_Color
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Color
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3
</UL>

<P><STRONG><a name="[52]"></a>Sparkle</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, normal_display.o(i.Sparkle))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Sparkle &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[51]"></a>Steady</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, normal_display.o(i.Steady))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Steady &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
</UL>

<P><STRONG><a name="[39]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, system_mini58series.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
</UL>

<P><STRONG><a name="[6d]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, timer.o(i.TIMER_GetModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[5e]"></a>TIMER_Open</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timer.o(i.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIMER_Open &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
</UL>

<P><STRONG><a name="[11]"></a>UART0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, csr1010.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART0_IRQHandler &rArr; Csr1010_Rcv_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Csr1010_Rcv_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART_Open</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, uart.o(i.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
</UL>

<P><STRONG><a name="[5c]"></a>UART_SetTimeoutCnt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(i.UART_SetTimeoutCnt))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
</UL>

<P><STRONG><a name="[73]"></a>Uart_Clear_Buf</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, csr1010.o(i.Uart_Clear_Buf))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>User_Data_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, data_process.o(i.User_Data_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = User_Data_Init &rArr; Color_Value_Get &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Data
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_To_Char
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Value_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>__0printf$5</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[82]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[4c]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[3b]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, normal_display.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Value_Get
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSR1010_Process
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_3
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_2
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_1
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3_0
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_3
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2_4
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_2
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_3
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_1_1
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Polar_Light
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Show
</UL>

<P><STRONG><a name="[83]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[84]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[85]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1e]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[1b]"></a>main</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, showhomeapp.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = main &rArr; MCU_Config &rArr; CLK_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Data_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Clear_Buf
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Update
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Display
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Data
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Process
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Csr1010_Snd_Data
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Csr1010_Rcv_Data
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count_Down_Control
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Work_Detect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[4d]"></a>stackDump</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, retarget.o(i.stackDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[34]"></a>CLK_Init</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, mcu_config.o(i.CLK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CLK_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
</UL>

<P><STRONG><a name="[35]"></a>SYS_UnlockReg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mcu_config.o(i.SYS_UnlockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
</UL>

<P><STRONG><a name="[28]"></a>BT_Power_Control</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, bt_control.o(i.BT_Power_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BT_Power_Control &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_Work_Detect
</UL>

<P><STRONG><a name="[3a]"></a>CSR1010_Process</STRONG> (Thumb, 1052 bytes, Stack size 64 bytes, data_process.o(i.CSR1010_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CSR1010_Process &rArr; Color_Value_Get &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex_To_Char
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color_Value_Get
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Process
</UL>

<P><STRONG><a name="[3c]"></a>Color_Value_Get</STRONG> (Thumb, 1254 bytes, Stack size 24 bytes, data_process.o(i.Color_Value_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Color_Value_Get &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSR1010_Process
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Data_Init
</UL>

<P><STRONG><a name="[3d]"></a>Hex_To_Char</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, data_process.o(i.Hex_To_Char))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSR1010_Process
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Data_Init
</UL>

<P><STRONG><a name="[40]"></a>Password_Process</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, data_process.o(i.Password_Process))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Process
</UL>

<P><STRONG><a name="[41]"></a>Syn_Process</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, data_process.o(i.Syn_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Syn_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Process
</UL>

<P><STRONG><a name="[6e]"></a>Csr1010_Rcv_Byte</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, csr1010.o(i.Csr1010_Rcv_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Csr1010_Rcv_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[44]"></a>SYS_UnlockReg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, flash_prgrm.o(i.SYS_UnlockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Data
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Data
</UL>

<P><STRONG><a name="[33]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, uart.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[10]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mini58series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mini58series.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>_printf_core</STRONG> (Thumb, 688 bytes, Stack size 96 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
