C51 COMPILER V9.52.0.0   BT_CONTROL                                                        07/31/2018 11:28:14 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE BT_CONTROL
OBJECT MODULE PLACED IN BT_Control.obj
COMPILER INVOKED BY: C:\Keil\C51\C51\BIN\C51.EXE UserAPP\BT_Control.c BROWSE INCDIR(.\UserAPP) DEBUG OBJECTEXTEND PRINT(
                    -.\BT_Control.lst) TABS(2) OBJECT(BT_Control.obj)

line level    source

   1          /*********************************************************
   2            *
   3            * FILE NAME     BT_Control.c
   4            * BRIEF         Control the bluetooth power
   5            *
   6          **********************************************************/
   7          #include "BT_Control.h"
   8          
   9          
  10          
  11          //------------------------< Gloable Parameters >-----------------------------//
  12          _TypeBtCon      BtConStatus;
  13          _Flag           BtRcvDataFlag;
  14          _Flag           BtPowerInitFlag;
  15          
  16          
  17          _Uint8    BtTime;
  18          _Uint8    PIO11_HighTime[2];
  19          _Uint8    PIO11_LowTime[2];
  20          _Uint8    BtRcvDataTime[3];
  21          
  22          /**
  23            * FunctionName    Bt_Work_Detect
  24            */
  25          void BT_Work_Detect(void)
  26          {
  27   1      
  28   1        // Detect the PIO11:it should be ouput PWM wave
  29   1        // 6s H + 6sL
  30   1        if (PORT_BT_DT == SET)
  31   1        {
  32   2          PIO11_LowTime[0] = 0;
  33   2          PIO11_LowTime[1] = 0;
  34   2          
  35   2          PIO11_HighTime[0]++;
  36   2          if (PIO11_HighTime[0] >= 50)      //20ms * 50 = 1s
  37   2          { 
  38   3            PIO11_HighTime[0] = 0;
  39   3            PIO11_HighTime[1]++;
  40   3            if (PIO11_HighTime[1] >= 10)    //10s
  41   3            {
  42   4              PIO11_HighTime[1] = 0;
  43   4              BtConStatus   = BT_RESTART;
  44   4              BtPowerInitFlag = TRUE;
  45   4            }
  46   3          }
  47   2        }
  48   1        else
  49   1        {
  50   2          PIO11_HighTime[0] = 0;
  51   2          PIO11_HighTime[1] = 0;
  52   2          
  53   2          PIO11_LowTime[0]++;
  54   2          if (PIO11_LowTime[0] >= 50)     //20ms * 50 = 1s
C51 COMPILER V9.52.0.0   BT_CONTROL                                                        07/31/2018 11:28:14 PAGE 2   

  55   2          { 
  56   3            PIO11_LowTime[0] = 0;
  57   3            PIO11_LowTime[1]++;
  58   3            if (PIO11_LowTime[1] >= 10)   //10s
  59   3            {
  60   4              PIO11_LowTime[1] = 0;
  61   4              BtConStatus     = BT_RESTART;
  62   4              BtPowerInitFlag = TRUE;
  63   4            }
  64   3          }
  65   2        }
  66   1        
  67   1        
  68   1        
  69   1      
  70   1        // if the bluetooth haven't receive command without 1hour, restart it.
  71   1        if (BtRcvDataFlag == TRUE)
  72   1        {
  73   2          BtRcvDataFlag = FALSE;
  74   2          BtRcvDataTime[0] = 0;
  75   2          BtRcvDataTime[1] = 0;
  76   2          BtRcvDataTime[2] = 0;
  77   2        }
  78   1        
  79   1        
  80   1      
  81   1          BtRcvDataTime[0]++;
  82   1          if (BtRcvDataTime[0] >= 50) //20 * 50 = 1s
  83   1          {
  84   2              BtRcvDataTime[0] = 0;
  85   2              BtRcvDataTime[1]++;
  86   2              if (BtRcvDataTime[1] >= 60)   //1min
  87   2              {
  88   3                  BtRcvDataTime[1] = 0;
  89   3                  BtRcvDataTime[2]++;
  90   3                  if (BtRcvDataTime[2] >= 60)   //1hour
  91   3                  {
  92   4                      BtRcvDataTime[2] = 0;
  93   4                      BtConStatus     = BT_RESTART;
  94   4                      BtPowerInitFlag = TRUE;
  95   4                  }
  96   3              }
  97   2          }
  98   1        
  99   1        
 100   1        //Control the BT power
 101   1        BT_Power_Control();
 102   1      }
 103          
 104          
 105          
 106          
 107          /************************************************************
 108            *
 109            * @FunctonName  BT_Power_Control
 110            * @Brief        Control the power of bluetooth
 111            *               
 112            */
 113          static void BT_Power_Control(void)
 114          {
 115   1        switch (BtConStatus)
 116   1        {
C51 COMPILER V9.52.0.0   BT_CONTROL                                                        07/31/2018 11:28:14 PAGE 3   

 117   2          case BT_IDLE:   break;
 118   2          
 119   2          case BT_POWER_ON:
 120   2          {
 121   3            if (BtPowerInitFlag == TRUE)
 122   3            {
 123   4              BtPowerInitFlag = FALSE;
 124   4              BtTime = 0;
 125   4              PORT_BT_CE = RESET;
 126   4            }
 127   3            
 128   3            BtTime++;
 129   3            if (BtTime > 5)
 130   3            {
 131   4              BtTime = 0;
 132   4              BtConStatus = BT_IDLE;
 133   4              P2M1  &= ~(BIT4 | BIT5);
 134   4              P2M2  &= ~(BIT4 | BIT5);
 135   4              P2    |= (BIT4 | BIT5);   // P24 = 1, P25 = 1
 136   4              SCON_1 = 0x50;    // work at mode 1
 137   4            }
 138   3          } break;
 139   2          
 140   2          case BT_POWER_OFF:
 141   2          {
 142   3              BtPowerInitFlag = FALSE;
 143   3              BtTime = 0;
 144   3              PORT_BT_CE = SET;
 145   3              BtConStatus = BT_IDLE;
 146   3              SCON_1 = 0x00;
 147   3              P2M1  &= ~(BIT4 | BIT5);
 148   3              P2M2  |= (BIT4 | BIT5);
 149   3              PORT_RX = RESET;
 150   3              PORT_TX = RESET;
 151   3          } break;
 152   2          
 153   2          case BT_RESTART:
 154   2          {
 155   3            if (BtPowerInitFlag == TRUE)
 156   3            {
 157   4              BtPowerInitFlag = FALSE;
 158   4              BtTime = 0;
 159   4              PORT_BT_CE = SET;
 160   4              SCON_1 = 0x00;
 161   4              P2M1  &= ~(BIT4 | BIT5);
 162   4              P2M2  |= (BIT4 | BIT5);
 163   4              PORT_RX = RESET;
 164   4              PORT_TX = RESET;
 165   4            }
 166   3            
 167   3            BtTime++;
 168   3            if (BtTime > 5)
 169   3            {
 170   4              BtTime = 0;
 171   4              BtConStatus = BT_POWER_ON;
 172   4              BtPowerInitFlag = TRUE;
 173   4            }
 174   3          } break;
 175   2        }
 176   1      }
 177          
 178          
C51 COMPILER V9.52.0.0   BT_CONTROL                                                        07/31/2018 11:28:14 PAGE 4   

 179          
 180          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    241    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
