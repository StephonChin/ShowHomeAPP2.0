C51 COMPILER V9.52.0.0   LED                                                               08/11/2018 17:41:14 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE LED
OBJECT MODULE PLACED IN Led.obj
COMPILER INVOKED BY: C:\Keil\C51\C51\BIN\C51.EXE UserAPP\Led.c BROWSE INCDIR(.\UserAPP) DEBUG OBJECTEXTEND PRINT(.\Led.l
                    -st) TABS(2) OBJECT(Led.obj)

line level    source

   1          /********************************************************************
   2            *
   3            * FILE NAME      Led.c
   4            *
   5          *********************************************************************/
   6          #include "Led.h"
   7          
   8          
   9          //Global arguments
  10          _Uint8    LedMode = LED_WIFI_STANDBY;
  11          bit       LedInit = TRUE;
  12          
  13          
  14          //File arguments
  15          _TypeLed_U   xdata  LedData;
  16          bit       UpdateFlag;
  17          _Uint8    LedStep;
  18          _Uint8    LedTime;
  19          _uint8    TempR;
  20          _uint8    TempG;
  21          _uint8    TempB;
  22          bit       DirectFlag;
  23          _uint8    HorseCnt;
  24          
  25          
  26          _uint8 code B_FADE[][3]={
  27            0, 0, 250,
  28            0, 10, 250,
  29            0, 20, 250,
  30            0, 30, 250,
  31            0, 0, 0,
  32            0, 0, 0,
  33            0, 0, 0,
  34            0, 0, 0,
  35            0, 0, 0,
  36            0, 0, 0,
  37          };
  38          
  39          _uint8 code R_FADE[][3]={
  40            250, 0, 0,
  41            250, 10, 0,
  42            250, 20, 0,
  43            250, 30, 0,
  44            0, 0, 0,
  45            0, 0, 0,
  46            0, 0, 0,
  47            0, 0, 0,
  48            0, 0, 0,
  49            0, 0, 0,
  50          };
  51          
  52          
  53          /**
  54            * Led_Updae
C51 COMPILER V9.52.0.0   LED                                                               08/11/2018 17:41:14 PAGE 2   

  55            *   > Update the led driver data
  56            *   > Led type: SK6812MINI-3535
  57            *   > 0: 0.3u + 0.9u    1: 0.9u + 0.3u
  58            */
  59          static void Led_Update(void)
  60          {
  61   1        _uint8  bitCnt    = 0;
  62   1        _uint8  byteCnt   = 0;
  63   1        _uint8  tempBuf   = 0;
  64   1        _uint8  * pBuf    = 0;
  65   1        _uint8  volatile delay     = 0;
  66   1      
  67   1        if (UpdateFlag == FALSE)    return;
  68   1        UpdateFlag = FALSE;
  69   1      
  70   1        pBuf = &LedData.SendBuf;
  71   1        for (byteCnt = 0;byteCnt < COLOR_TOTAL;byteCnt++){
  72   2          tempBuf = *pBuf;
  73   2          pBuf++;
  74   2          for (bitCnt = 0; bitCnt < 8; bitCnt++){
  75   3            if ((tempBuf & 0x80) != 0x80){
  76   4              PORT_COMM = SET;
  77   4              delay = 0;
  78   4              PORT_COMM = RESET;
  79   4            }
  80   3            else{
  81   4              PORT_COMM = SET;
  82   4              delay = 0;delay = 0;delay = 0;delay = 0;
  83   4              PORT_COMM = RESET;
  84   4            }
  85   3      
  86   3            tempBuf <<= 1;
  87   3          }
  88   2        }
  89   1      }
  90          
  91          /**
  92            * Led_Control
  93            *   > Control the led display mode
  94            */
  95          void Led_Control(void)
  96          {
  97   1        //LedMode = LED_WIFI_STANDBY;
  98   1        switch (LedMode){
  99   2          case LED_OFF:               Led_Off();              break;
 100   2          case LED_WIFI_STANDBY:      Wifi_Standby();         break;
 101   2          case LED_WIFI_DISCONNECT:   Wifi_Disconnect();      break;
 102   2          case LED_WIFI_CONNECTED:    Wifi_Connected();       break;
 103   2          case LED_NORMAL:            Led_Normal();           break;
 104   2          case LED_ERROR:             Led_Err();              break;
 105   2        }
 106   1        
 107   1        Led_Update();
 108   1      }
 109          
 110          /**
 111            * Led_Off
 112            */
 113          static void Led_Off(void)
 114          {
 115   1        _uint8  cnt = 0;
 116   1        if(LedInit == TRUE){
C51 COMPILER V9.52.0.0   LED                                                               08/11/2018 17:41:14 PAGE 3   

 117   2          LedInit = FALSE;
 118   2          for (cnt = 0; cnt < LED_TOTAL; cnt++){
 119   3            LedData.Buffer[cnt].DutyR = 0;
 120   3            LedData.Buffer[cnt].DutyG = 0;
 121   3            LedData.Buffer[cnt].DutyB = 0;
 122   3          }
 123   2          
 124   2          UpdateFlag = TRUE;
 125   2        }
 126   1      }
 127          
 128          /**
 129            * Led_Normal
 130            */
 131          static void Led_Normal(void)
 132          {
 133   1        _uint8  temp = 0;
 134   1        if (LedInit == TRUE){
 135   2          LedInit = FALSE;
 136   2          for (temp = 0; temp < LED_TOTAL; temp++){
 137   3            LedData.Buffer[temp].DutyR = 0;
 138   3            LedData.Buffer[temp].DutyG = 0;
 139   3            LedData.Buffer[temp].DutyB = 0;
 140   3          }
 141   2          UpdateFlag = TRUE;
 142   2          LedTime = 0;
 143   2          LedStep = 0;
 144   2          TempR = 0;
 145   2          TempG = 0;
 146   2          TempB = 0;
 147   2        }
 148   1        
 149   1        
 150   1        switch (LedStep){
 151   2          case 0:{
 152   3            LedTime++;
 153   3            if (LedTime > 3){
 154   4              LedTime = 0;
 155   4              TempR = 0;  TempG = 240; TempB = 0;
 156   4              HorseCnt++;
 157   4              if (HorseCnt > 10){
 158   5                HorseCnt = 0;
 159   5                LedStep++;
 160   5              }
 161   4              
 162   4              for (temp = 9; temp > 0; temp--){
 163   5                LedData.Buffer[temp].DutyR = LedData.Buffer[temp - 1].DutyR;
 164   5                LedData.Buffer[temp].DutyG = LedData.Buffer[temp - 1].DutyG;
 165   5                LedData.Buffer[temp].DutyB = LedData.Buffer[temp - 1].DutyB;
 166   5              }
 167   4              LedData.Buffer[0].DutyR = TempR;
 168   4              LedData.Buffer[0].DutyG = TempG;
 169   4              LedData.Buffer[0].DutyB = TempB;
 170   4            }
 171   3          } break;
 172   2          
 173   2          case 1:{
 174   3            if (TempG > 0)    TempG -= 3;
 175   3            else{
 176   4              LedMode = LED_OFF;
 177   4              LedInit = TRUE;
 178   4            }
C51 COMPILER V9.52.0.0   LED                                                               08/11/2018 17:41:14 PAGE 4   

 179   3            
 180   3            for (temp = 0; temp < LED_TOTAL; temp++){
 181   4              LedData.Buffer[temp].DutyR = TempR;
 182   4              LedData.Buffer[temp].DutyG = TempG;
 183   4              LedData.Buffer[temp].DutyB = TempB;
 184   4            }
 185   3          } break;
 186   2        }
 187   1        
 188   1        
 189   1        
 190   1        
 191   1        
 192   1        
 193   1        UpdateFlag = TRUE;
 194   1      }
 195          
 196          /**
 197            * Led_Err
 198            */
 199          static void Led_Err(void)
 200          {
 201   1      
 202   1      }
 203          
 204          
 205          /**
 206            * Wifi_Standby
 207            */
 208          static void Wifi_Standby(void)
 209          {
 210   1        _uint8  temp = 0;
 211   1        if (LedInit == TRUE){
 212   2          LedInit = FALSE;
 213   2          for (temp = 0; temp < LED_TOTAL; temp++){
 214   3            LedData.Buffer[temp].DutyR = 255;
 215   3            LedData.Buffer[temp].DutyG = 0;
 216   3            LedData.Buffer[temp].DutyB = 0;
 217   3          }
 218   2          UpdateFlag = TRUE;
 219   2          LedTime = 0;
 220   2          LedStep = 0;
 221   2          TempR = 255;
 222   2          TempG = 0;
 223   2          TempB = 0;
 224   2          HorseCnt = 0;
 225   2        }
 226   1       
 227   1        if (LedTime < 4){
 228   2          LedTime++;
 229   2          return;
 230   2        }
 231   1        LedTime = 0;
 232   1       
 233   1        switch (LedStep){
 234   2          case 0:{
 235   3            if (TempG < 255)    TempG += 15;
 236   3            else                LedStep++;
 237   3          } break;
 238   2          
 239   2          case 1:{
 240   3            if (TempR > 0)      TempR -= 15;
C51 COMPILER V9.52.0.0   LED                                                               08/11/2018 17:41:14 PAGE 5   

 241   3            else                LedStep++;
 242   3          } break;
 243   2          
 244   2          case 2:{
 245   3            if (TempB < 255)    TempB += 15;
 246   3            else                LedStep++;
 247   3          } break;
 248   2          
 249   2          case 3:{
 250   3            if (TempG > 0)      TempG -= 15;
 251   3            else                LedStep++;
 252   3          } break;
 253   2          
 254   2          case 4:{
 255   3            if (TempR < 255)    TempR += 15;
 256   3            else                LedStep++;
 257   3          } break;
 258   2          
 259   2          case 5:{
 260   3            if (TempB > 0)      TempB -= 15;
 261   3            else                LedStep = 0;
 262   3          } break;
 263   2        }
 264   1        
 265   1        for (temp = LED_TOTAL - 1; temp > 0; temp--){
 266   2          LedData.Buffer[temp].DutyR = LedData.Buffer[temp - 1].DutyR;
 267   2          LedData.Buffer[temp].DutyG = LedData.Buffer[temp - 1].DutyG;
 268   2          LedData.Buffer[temp].DutyB = LedData.Buffer[temp - 1].DutyB;
 269   2        }
 270   1        LedData.Buffer[0].DutyR = TempR;
 271   1        LedData.Buffer[0].DutyG = TempG;
 272   1        LedData.Buffer[0].DutyB = TempB;
 273   1        
 274   1        UpdateFlag = TRUE;
 275   1      }
 276          
 277          
 278          /**
 279            * Wifi_Connected
 280            */
 281          static void Wifi_Connected(void)
 282          {
 283   1        _uint8  temp = 0;
 284   1        if (LedInit == TRUE){
 285   2          LedInit = FALSE;
 286   2          
 287   2          LedTime = 0;
 288   2          LedStep = 0;
 289   2          TempR = 0;
 290   2          TempG = 0;
 291   2          TempB = 240;
 292   2          for (temp = 0; temp < LED_TOTAL; temp++){
 293   3            LedData.Buffer[temp].DutyR = TempR;
 294   3            LedData.Buffer[temp].DutyG = TempG;
 295   3            LedData.Buffer[temp].DutyB = TempB;
 296   3          }
 297   2          UpdateFlag = TRUE;
 298   2        }
 299   1        
 300   1        
 301   1        if (LedTime < 100){
 302   2          LedTime++;
C51 COMPILER V9.52.0.0   LED                                                               08/11/2018 17:41:14 PAGE 6   

 303   2          return;
 304   2        }
 305   1        
 306   1        
 307   1        if (TempB > 0)   TempB -= 3;
 308   1        else{
 309   2          LedMode = LED_OFF;
 310   2          LedInit = TRUE;
 311   2        }
 312   1      
 313   1        
 314   1        
 315   1        for (temp = 0; temp < LED_TOTAL; temp++){
 316   2          LedData.Buffer[temp].DutyR = TempR;
 317   2          LedData.Buffer[temp].DutyG = TempG;
 318   2          LedData.Buffer[temp].DutyB = TempB;
 319   2        }
 320   1        
 321   1        UpdateFlag = TRUE;
 322   1      }
 323          
 324          
 325          /**
 326            * Wifi_Connecting
 327            */
 328          static void Wifi_Disconnect(void)
 329          {
 330   1        _uint8  temp = 0;
 331   1        if (LedInit == TRUE){
 332   2          LedInit = FALSE;
 333   2          for (temp = 0; temp < LED_TOTAL; temp++){
 334   3            LedData.Buffer[temp].DutyR = R_FADE[temp][0];
 335   3            LedData.Buffer[temp].DutyG = R_FADE[temp][1];
 336   3            LedData.Buffer[temp].DutyB = R_FADE[temp][2];
 337   3          }
 338   2          UpdateFlag = TRUE;
 339   2          LedTime = 0;
 340   2          LedStep = 0;
 341   2          TempR   = 0;
 342   2          TempG   = 0;
 343   2          TempB   = 0;
 344   2        }
 345   1        
 346   1        if (LedTime < 10){
 347   2          LedTime++;
 348   2          return;
 349   2        }
 350   1        LedTime = 0;
 351   1        
 352   1        TempR = LedData.Buffer[LED_TOTAL - 1].DutyR;
 353   1        TempG = LedData.Buffer[LED_TOTAL - 1].DutyG;
 354   1        TempB = LedData.Buffer[LED_TOTAL - 1].DutyB;
 355   1        for (temp = LED_TOTAL - 1; temp > 0; temp--){
 356   2          LedData.Buffer[temp].DutyR = LedData.Buffer[temp - 1].DutyR;
 357   2          LedData.Buffer[temp].DutyG = LedData.Buffer[temp - 1].DutyG;
 358   2          LedData.Buffer[temp].DutyB = LedData.Buffer[temp - 1].DutyB;
 359   2        }
 360   1        LedData.Buffer[0].DutyR = TempR;
 361   1        LedData.Buffer[0].DutyG = TempG;
 362   1        LedData.Buffer[0].DutyB = TempB;
 363   1      
 364   1        
C51 COMPILER V9.52.0.0   LED                                                               08/11/2018 17:41:14 PAGE 7   

 365   1        
 366   1        UpdateFlag = TRUE;
 367   1      }
 368          
 369          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1273    ----
   CONSTANT SIZE    =     60    ----
   XDATA SIZE       =     30    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
